package com.kh.moco.board.controller;

import java.util.ArrayList;
import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.kh.moco.board.model.exception.BoardException;
import com.kh.moco.board.model.service.BoardService;
import com.kh.moco.board.model.vo.Board;
import com.kh.moco.board.model.vo.Criteria;
import com.kh.moco.board.model.vo.PageInfo;
import com.kh.moco.common.Pagination;

@Controller
public class BoardController {
	
	@Autowired
	private BoardService bService;
	
	
	@RequestMapping("list.bo")
	public String selectBoardList(@RequestParam(value="page", required=false) Integer page, Model model) {
		int currentPage = 1;
		if(page != null) {
			currentPage = page;
		}
		
		String Category="main";
		
		int listCount = bService.getListCountMain(1);
		
		PageInfo pi = Pagination.getPageInfo(currentPage, listCount, 10);
		
		ArrayList<Board> list = bService.selectBoardListMain(pi, 1);

		if(list != null) {
			model.addAttribute("pi",pi);
			model.addAttribute("list", list);
			model.addAttribute("Category",Category);
			return "boardList";
		} else {
			throw new BoardException("게시글 조회 실패");
		}
	}
	
	
	@RequestMapping("boardQNA.bo")
	public String selectBoardListQNA(@RequestParam(value="page", required=false) Integer page, Model model) {
		int currentPage = 1;
		if(page != null) {
			currentPage = page;
		}
		String Category="QNA";
		
		int listCount = bService.getListCount("qNa");
		
		PageInfo pi = Pagination.getPageInfo(currentPage, listCount, 10);
		
		ArrayList<Board> list = bService.selectBoardList(pi, "qNa");

		if(list != null) {
			model.addAttribute("pi",pi);
			model.addAttribute("list", list);
			model.addAttribute("Category",Category);
			
			return "boardList";
		} else {
			throw new BoardException("게시글 조회 실패");
		}
	}
	
	@RequestMapping("boardReview.bo")
	public String selectBoardListReview(@RequestParam(value="page", required=false) Integer page, Model model) {
		int currentPage = 1;
		if(page != null) {
			currentPage = page;
		}
		String Category="Review";
		
		int listCount = bService.getListCount("후기");
		
		PageInfo pi = Pagination.getPageInfo(currentPage, listCount, 10);
		
		ArrayList<Board> list = bService.selectBoardList(pi, "후기");

		if(list != null) {
			model.addAttribute("pi",pi);
			model.addAttribute("list", list);
			model.addAttribute("Category",Category);
			
			return "boardList";
		} else {
			throw new BoardException("게시글 조회 실패");
		}
	}
	@RequestMapping("boardUnKnown.bo")
	public String selectBoardListUnKnown(@RequestParam(value="page", required=false) Integer page, Model model) {
		int currentPage = 1;
		if(page != null) {
			currentPage = page;
		}
		String Category="UnKnown";
		
		int listCount = bService.getListCount("익명");
		
		PageInfo pi = Pagination.getPageInfo(currentPage, listCount, 10);
		
		ArrayList<Board> list = bService.selectBoardList(pi, "익명");
		

		if(list != null) {
			model.addAttribute("pi",pi);
			model.addAttribute("list", list);
			model.addAttribute("Category",Category);
			
			return "boardList";
		} else {
			throw new BoardException("게시글 조회 실패");
		}
	}
	
	@RequestMapping("Search.bo")
	public String selectBoardListSearch(@RequestParam(value="page", required=false) Integer page,
										@RequestParam(value="searchCondition", required=false) String searchCondition,
										@RequestParam(value="searchValue", required=false) String searchName,
										@RequestParam(value="searchCategory", required=false) String searchCategory, Model model) {
		int currentPage = 1;
		if(page != null) {
			currentPage = page;
		}
		
		System.out.print(searchCategory);
		
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("searchCondition", searchCondition);
		map.put("searchValue", searchName);
		
		
		int listCount = bService.getListCountSearch(map);
		
		PageInfo pi = Pagination.getPageInfo(currentPage, listCount, 10);
		
		ArrayList<Board> list = bService.selectBoardListSearch(pi, map);
		
		if(list != null) {
			model.addAttribute("pi",pi);
			model.addAttribute("list", list);
			model.addAttribute("searchCondition",searchCondition);
			model.addAttribute("searchValue",searchName);
			model.addAttribute("searchCategory",searchCategory);
			return "boardSearch";
		} else {
			throw new BoardException("게시글 조회 실패");
		}
	}
	
}
