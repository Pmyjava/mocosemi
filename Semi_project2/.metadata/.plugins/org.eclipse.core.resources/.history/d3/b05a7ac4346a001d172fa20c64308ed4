package com.kh.moco.member.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

import com.kh.moco.member.exception.MemberException;
import com.kh.moco.member.model.service.MemberService;
import com.kh.moco.member.model.vo.Member;


@SessionAttributes("loginUser")
@Controller
public class MemberController {
	
	@Autowired
	private MemberService mService;
	//다른곳에서 사용하기 위해서 자동으로 의존성 주입
	
	@Autowired
	private BCryptPasswordEncoder bcrypt;
	
	// 1. 로그인 페이지 이동.
    @RequestMapping(value = "loginView.me")
    public String loginView() {
		//return "member/login";
		return "login";
	}
    
    // 2. 회원가입 페이지 이동
  	@RequestMapping("enrollView.me")
  	public String enroll() {
  		return "enroll";
  	}
  	
  	@RequestMapping("insertMember.me")
	public String insertMember(@ModelAttribute Member m) {
		System.out.println(m);
				
		String encPwd = bcrypt.encode(m.getMemberPwd());
		m.setMemberPwd(encPwd);
		
		int result = mService.insertMember(m);
		
		if(result > 0) {
			return "redirect:home.do";
		}else {
			throw new MemberException("회원가입에 실패하였습니다.");
		}
	}
	
	@RequestMapping(value="login.me", method=RequestMethod.POST)
	public String login(@ModelAttribute Member m, Model model) {
		System.out.println(m);
		Member loginUser = mService.login(m);
		System.out.println(loginUser);
		
		
		if(bcrypt.matches(m.getMemberPwd(), loginUser.getMemberPwd())) {
			model.addAttribute("loginUser", loginUser);
			return "redirect:home.do";
		} else {
			throw new MemberException("로그인에 실패하였습니다.");
		}
	}
	
	@RequestMapping("logout.me")
	public String logout(SessionStatus status) {
		status.setComplete();
		return "redirec:home.do";
	}
	
	@RequestMapping("checkId.me")
	@ResponseBody
	public String checkId(@RequestParam("id") String id) {
		
		int count = mService.checkId(id);
		
		String result = count == 0? "yes" : "no";
		
		return result;
	}
	
	@RequestMapping("checkNickName.me")
	@ResponseBody
	public String checkNickName(@RequestParam("nickName") String nickName) {
		int count = mService.checkNickName(nickName);
		
		String result = count == 0 ? "yes" : "no";
		
		return result;
	}	
    
}